/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Ankit' at '10/4/16 11:11 AM' with Gradle 3.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-SNAPSHOT")
    }
}


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
}

//For Aspect Weaving

configurations {
    aspectjweaver
}


dependencies{
    compile ('org.apache.commons:commons-lang3:3.4')
    // https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    compile "org.aspectj:aspectjrt:1.+"
    compile "org.springframework:spring-aop:4.+"

    //For file logger
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.2'
    compile group: 'ch.qos.logback', name:'logback-classic', version: '1.+'
    compile group: 'ch.qos.logback', name:'logback-core', version: '1.+'

    //For AspectJ
    aspectjweaver "org.aspectj:aspectjweaver:1.+"
    runtime configurations.aspectjweaver.dependencies

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web:1.4.1.RELEASE")
    }

    compile project(':BoilerPlate_Annotation')
    compile project(':BoilerPlate_Processor')

    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    testCompile('org.mockito:mockito-core:1.10.+') {
        exclude group: 'org.hamcrest'
    }

    testCompile('junit:junit:4.+') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-all:1.+'

    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.3.0-rc1'

}

subprojects{

    buildscript {
        repositories {
            jcenter()
        }
    }
    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    configurations {
        aspectjweaver
    }

    dependencies{

        compile 'org.apache.commons:commons-lang3:3.4'
        compile "org.springframework:spring-aop:4.+"
        compile "org.aspectj:aspectjrt:1.+"
        compile "org.springframework:spring-aop:4.+"
        aspectjweaver "org.aspectj:aspectjweaver:1.+"
        runtime configurations.aspectjweaver.dependencies

        testCompile('junit:junit:4.+') {
            exclude group: 'org.hamcrest'
        }
        testCompile 'org.hamcrest:hamcrest-all:1.+'
        testCompile "org.mockito:mockito-core:1.+"
    }

    group 'de.fh_kiel'
    version '1.0'
}

project (':BoilerPlate_Processor') {

    dependencies {
        compile project(':BoilerPlate_Annotation')

        compile 'com.squareup:javapoet:1.7.+'
        compile "org.springframework:spring-aop:4.+"
        compile "org.aspectj:aspectjrt:1.+"
        compile "org.springframework:spring-aop:4.+"
        aspectjweaver "org.aspectj:aspectjweaver:1.+"
        runtime configurations.aspectjweaver.dependencies

    }
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/generated', 'src/main/java']
        }
    }
}
task runProcessor(type: JavaCompile, group: 'build', description: 'generates classes including ' +
        'the boilerplate code') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "de.fh_kiel.annotation_processor.BoilerPlateProcessor"
    ]
    destinationDir = sourceSets.main.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn runProcessor
}

clean {
    delete sourceSets.main.java.srcDirs.iterator().next()
}

